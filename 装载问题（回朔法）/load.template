template <class Type>
class Loading
{
	friend Type Maxloading(Type[], Type, int, int[]);
private:
	void Backtrack(int i);
	int n,  //集装箱数
		*x,  //当前解
		*bestx;  //当前最优解
	Type *w,  //集装箱重量数组
		c,  //第一艘轮船的在载重量
		cw,  //当前载重量
		bestw, //当前最优装载重量
		r;  //剩余集装箱重量
};

template <class Type>
void Loading<Type> ::Backtrack(int i)
{
	//搜索第i层节点
	if (i > n)  //到达叶节点
	{
		if (cw > bestw)
		{
			for (int j = 1; j <= n; j++)
				bestx[j] = x[j];
			bestw = cw;
		}
		return;
	}
	//搜索子树
	r -= w[i];
	if (cw + w[i] <= c)  //搜索左子树
	{
		x[i] = 1;
		cw += w[i];
		Backtrack(i + 1);
		cw -= w[i];
	}
	if (cw + r > bestw)  //搜索右子树
	{
		x[i] = 0;
		Backtrack(i + 1);
	}
	r += w[i];  //回溯
}

template <class Type>
Type Maxloading(Type w[], Type c, int n, int bestx[])
{
	//返回最优载重量
	Loading <Type> X;
	//初始化X
	X.x = new int[n + 1];
	X.w = w;
	X.c = c;
	X.n = n;
	X.bestx = bestx;
	X.bestw = 0;
	X.cw = 0;
	//初始化r
	X.r = 0;
	for (int i = 1; i <= n; i++)
	{
		X.r += w[i];
	}
	X.Backtrack(1);
	delete[] X.x;
	return X.bestw;
}